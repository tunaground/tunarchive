{% extends "layout.html.j2" %}
{% block title -%}
    {{ title }}
{%- endblock %}
{% block style -%}
    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            background-color: rgb(240, 240, 240);
        }

        nav {
            padding: 0.5em 1em;
            background-color: black;
        }

        .search_container {
            display: flex;
        }

        .search {
            font-size: 1em;
            margin: 0.5em;
            flex-grow: 1;
        }

        .pagination {
            margin: 0.5em;
            line-height: 1.5em;
        }

        .btn_pg {
            margin: 0.2em;
        }

        ul {
            margin: 0.7em 0.5em;
            padding: 0;
            display: flex;
        }

        li {
            list-style: none;
        }

        .thread_id {
            min-width: 6em;
        }

        .thread_username {
            margin-right: 1em;
        }

        .thread_username {
            margin-left: auto;
            margin-right: 0;
        }

        @media (max-width: 768px) {
            .thread_id {
                display: none;
            }
        }
    </style>
{% endblock %}
{% block script %}
    <script>
        const threads = {{ threads }}

        function filterData(query, threads) {
            return threads.filter(item => {
                return item.title.toLowerCase().includes(query.toLowerCase()) ||
                    item.username.toLowerCase().includes(query.toLowerCase());
            });
            {#populateList(filteredData);#}
        }

        function paginateThreads(threads) {
            const paginated = [];
            for (let i = 0; i < threads.length; i += 100) {
                paginated.push(threads.slice(i, i + 100));
            }
            return paginated
        }

        function getPageThread(paginated, pageNumber) {
            const totalPages = paginated.length;
            if (pageNumber < 1 || pageNumber > totalPages) {
                return [];
            }
            return paginated[pageNumber - 1];
        }

        function getPageNumberFromURL() {
            const params = new URLSearchParams(window.location.search);
            const page = params.get('page');
            return page ? parseInt(page, 10) : 1;
        }

        function populateList(data) {
            const threadList = document.getElementById('thread_list');

            threadList.innerHTML = '';

            data.forEach(item => {
                const itemDiv = document.createElement('div')
                const summaryUl = document.createElement('ul')
                const threadId = document.createElement('li')
                const threadTitle = document.createElement('li')
                const threadUsername = document.createElement('li')
                const titleLink = document.createElement('a');

                threadId.classList.add('thread_id')
                threadTitle.classList.add('thread_title')
                threadUsername.classList.add('thread_username')

                titleLink.href = item.threadId + '/index.html'
                titleLink.textContent = item.title
                titleLink.target = '_blank'

                threadId.innerHTML = item.threadId
                threadTitle.appendChild(titleLink)
                threadUsername.innerHTML = item.username

                summaryUl.appendChild(threadId)
                summaryUl.appendChild(threadTitle)
                summaryUl.appendChild(threadUsername)

                itemDiv.appendChild(summaryUl);

                threadList.appendChild(itemDiv)
            });
        }

        function generatePaginationLinks(paginated, currentPage) {
            const paginationContainer = document.getElementById("pagination")

            const totalPages = paginated.length;
            let paginationHTML = '';

            if (currentPage > 1) {
                paginationHTML += `<a class="btn_pg" href="?page=${currentPage - 1}">이전</a> `;
            }

            for (let i = 1; i <= totalPages; i++) {
                if (i === currentPage) {
                    paginationHTML += `<span class="btn_pg">${i}</span> `;
                } else {
                    paginationHTML += `<a class="btn_pg" href="?page=${i}">${i}</a> `;
                }
            }

            if (currentPage < totalPages) {
                paginationHTML += `<a class="btn_pg" href="?page=${currentPage + 1}">다음</a>`;
            }

            paginationContainer.innerHTML = paginationHTML
        }

        const search = document.getElementById('search');

        const currentPage = getPageNumberFromURL()
        const paginated = paginateThreads(threads)

        populateList(getPageThread(paginated, currentPage))
        generatePaginationLinks(paginated, currentPage)

        search.addEventListener('input', function () {
            const paginated = paginateThreads(filterData(search.value, threads))
            populateList(getPageThread(paginated, currentPage))
            generatePaginationLinks(paginated, currentPage)
        })
    </script>
{% endblock %}
{% block body -%}
    <nav>
        <a href="../index.html"><- 돌아가기</a>
    </nav>
    <div class="search_container">
        <input type="text" class="search" id="search"/>
    </div>
    <div class="pagination" id="pagination"></div>
    <div id="thread_list"></div>
{%- endblock %}
